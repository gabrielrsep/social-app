generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  posts         Post[]
  votes         Vote[]
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  ref       String?  @db.Uuid
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  votes     Vote[]
}

model Vote {
  type     VoteType?
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String    @db.Uuid
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String    @db.Uuid
  @@id( name: "id", [authorId, postId])
}

enum VoteType {
  UP
  DOWN
}
